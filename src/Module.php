<?php

/**
 * Lombardia Informatica S.p.A.
 * OPEN 2.0
 *
 *
 * @package    lispa\amos\socialauth
 * @category   CategoryName
 */

namespace lispa\amos\socialauth;

use lispa\amos\admin\AmosAdmin;
use lispa\amos\core\module\AmosModule;
use yii\helpers\ArrayHelper;
use lispa\amos\socialauth\models\SocialAuthServices;
use Yii;

/**
 * Class Module
 * @package lispa\amos\socialauth
 */
class Module extends AmosModule
{
    public static $CONFIG_FOLDER = 'config';

    /**
     * @var array providers configuration
     */
    public $providers = [];

    /**
     * @var $enableLogin bool Is Login With Social Enabled?
     */
    public $enableLogin;

    /**
     * @var $enableLogin bool Is Social Account Link Enabled?
     */
    public $enableLink;

    /**
     * @var $enableLogin bool Is Social registration Enabled?
     */
    public $enableRegister;

    /**
     * @var bool Decide if the overload security is enabled (false) or user can be oberloaded by social (true)
     */
    public $userOverload = false;

    /**
     * @var bool $enableServices - array with enabled service names
     */
    public $enableServices = ['calendar', 'contacts'];

    /**
     * @inheritdoc
     */
    static $name = 'amossocialauth';

    /**
     * @var string|boolean the layout that should be applied for views within this module. This refers to a view name
     * relative to [[layoutPath]]. If this is not set, it means the layout value of the [[module|parent module]]
     * will be taken. If this is false, layout will be disabled within this module.
     */
    public $layout = 'main';

    /**
     * @inheritdoc
     */
    public $controllerNamespace = 'lispa\amos\socialauth\controllers';

    public $timeout = 180;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::setAlias('@lispa/amos/' . static::getModuleName() . '/controllers', __DIR__ . '/controllers');
//pr(\Yii::$app->getRequest());die;
        //Configuration
        $config = require(__DIR__ . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'config.php');
        \Yii::configure($this, ArrayHelper::merge($config, $this));
    }

    /**
     * @return array
     */
    public function getProviders() {
        return $this->providers;
    }

    /**
     * Module name
     * @return string
     */
    public static function getModuleName()
    {
        return self::$name;
    }

    public function getWidgetIcons()
    {
        return [
        ];
    }

    public function getWidgetGraphics()
    {
        return [
        ];
    }

    /**
     * Get default models
     * @return array
     */
    protected function getDefaultModels()
    {
        return [
        ];
    }

    /**
     * @param string $provider
     * @param null|SocialAuthServices $service
     * @return \Google_Client|null
     */
    public function getClient($provider = 'google', $service = null)
    {
        $providers = $this->providers;
        $client = null;
        if($provider == 'google') {
            if (!empty($providers) && array_key_exists('Google', $providers)) {
                $key = $providers['Google']['keys']['secret'];
                $clientId = $providers['Google']['keys']['id'];
                $client = new \Google_Client();
                $client->setClientId($clientId);
                $client->setClientSecret($key);
                if(!is_null($service)){
                    $accessToken['access_token'] = $service->access_token;
                    $accessToken['token_type'] = $service->token_type;
                    $accessToken['expires_in'] = $service->expires_in;
                    $accessToken['created'] = $service->token_created;
                    $client->setAccessToken($accessToken);
                    // Refresh the token if it's expired.
                    if ($client->isAccessTokenExpired()) {
                        $accessToken = $client->fetchAccessTokenWithRefreshToken($service->refresh_token);
                        $service->access_token = $accessToken['access_token'];
                        $service->token_type = $accessToken['token_type'];
                        $service->expires_in = $accessToken['expires_in'];
                        $service->token_created = $accessToken['created'];
                        if (!$service->save()) {
                            \Yii::$app->session->addFlash('danger', Module::t('amossocialauth',
                                'An error occurred while synchronizing {provider} {serviceName}',
                                ['provider' => $provider, 'serviceName' => $service->service]));
                        }
                    }
                }
            }
        }
        return $client;
    }

    /**
     * @param SocialAuthServices $service
     * @return string $message
     */
    public function synchronizeGoogleService($service)
    {
        $message = '';
        $client = $this->getClient('google', $service);
        if ($service->service == 'calendar') {
            $serviceGoogle = new \Google_Service_Calendar($client);
            $calendarId = $service->service_id;
            if (empty($calendarId)) {
                $calendar = new \Google_Service_Calendar_Calendar();
                $calendar->setSummary(\Yii::$app->name);
                $calendar = $serviceGoogle->calendars->insert($calendar);
                $calendarId = $calendar->getId();

                $service->service_id = $calendarId;
                $service->save(false);
                $message = Module::t('amossocialauth',  'Calendar \'{appName}\' has been added successfully to your Google Account.', ['appName' => \Yii::$app->name]);
            }else{
                $message .= Module::t('amossocialauth',  'Calendar \'{appName}\' synchronization', ['appName' => \Yii::$app->name]);
            }

            $eventsModule = Yii::$app->getModule('events');
            if (!is_null($eventsModule)) {
                return $eventsModule->synchronizeEvents($serviceGoogle, $calendarId, $message);
            }
        } elseif ($service->service == 'contacts'){
            $serviceGoogle = new \Google_Service_PeopleService($client);
            $message = AmosAdmin::synchronizeGoogleContacts($serviceGoogle);
        }
        return $message;
    }

    /**
     * @param SocialAuthServices $service
     * @return string
     */
    public function removeGoogleService($service)
    {
        $message = '';
        $client = $this->getClient();
        $accessToken['access_token'] = $service->access_token;
        $accessToken['token_type'] = $service->token_type;
        $accessToken['expires_in'] = $service->expires_in;
        $accessToken['created'] = $service->token_created;
        $client->setAccessToken($accessToken);
        // Refresh the token if it's expired.
        if ($client->isAccessTokenExpired()) {
            $accessToken = $client->fetchAccessTokenWithRefreshToken($service->refresh_token);
            $service->access_token = $accessToken['access_token'];
            $service->token_type = $accessToken['token_type'];
            $service->expires_in = $accessToken['expires_in'];
            $service->token_created = $accessToken['created'];
            if (!$service->save()) {
                $message = Module::t('amosadmin', 'Errore durante l\'aggiornamento delle impostazioni');
            }
        }
        if ($service->service == 'calendar') {
            $message .= ' calendar : ';
            $serviceGoogle = new \Google_Service_Calendar($client);
            $calendarId = $service->service_id;
            if (!empty($calendarId)) {
                $calendar = $serviceGoogle->calendars->get($calendarId);
                if ($calendar) {
                    $message .= $calendarId . ' ';
                }
            }
            $serviceGoogle->calendars->delete($calendarId);
        } elseif ($service->service == 'contacts'){
            AmosAdmin::removeGoogleContacts();
        }
        return $message;
    }


}
